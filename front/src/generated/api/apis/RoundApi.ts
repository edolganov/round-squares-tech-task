/* tslint:disable */
/* eslint-disable */
/* eslint-disable */
// @ts-nocheck
/**
* P2EX API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


import * as runtime from '../runtime';
import type {
  CreateRoundReq,
  GetRoundInfoResp,
  Round,
  TapReq,
  TapResp,
} from '../models/index';
import {
    CreateRoundReqFromJSON,
    CreateRoundReqToJSON,
    GetRoundInfoRespFromJSON,
    GetRoundInfoRespToJSON,
    RoundFromJSON,
    RoundToJSON,
    TapReqFromJSON,
    TapReqToJSON,
    TapRespFromJSON,
    TapRespToJSON,
} from '../models/index';

export interface RoundCreateRoundRequest {
    createRoundReq: CreateRoundReq;
}

export interface RoundGetRoundInfoRequest {
    roundId: string;
}

export interface RoundTapToRoundRequest {
    tapReq: TapReq;
}

/**
 * RoundApi - interface
 * 
 * @export
 * @interface RoundApiInterface
 */
export interface RoundApiInterface {
    /**
     * 
     * @summary Create round
     * @param {CreateRoundReq} createRoundReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoundApiInterface
     */
    roundCreateRoundRaw(requestParameters: RoundCreateRoundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Round>>;

    /**
     * Create round
     */
    roundCreateRound(createRoundReq: CreateRoundReq, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Round>;

    /**
     * 
     * @summary Get round info for current user
     * @param {string} roundId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoundApiInterface
     */
    roundGetRoundInfoRaw(requestParameters: RoundGetRoundInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRoundInfoResp>>;

    /**
     * Get round info for current user
     */
    roundGetRoundInfo(roundId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRoundInfoResp>;

    /**
     * 
     * @summary Get actual rounds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoundApiInterface
     */
    roundGetTopRoundsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Round>>>;

    /**
     * Get actual rounds
     */
    roundGetTopRounds(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Round>>;

    /**
     * 
     * @summary Add tap to active round
     * @param {TapReq} tapReq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoundApiInterface
     */
    roundTapToRoundRaw(requestParameters: RoundTapToRoundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TapResp>>;

    /**
     * Add tap to active round
     */
    roundTapToRound(tapReq: TapReq, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TapResp>;

}

/**
 * 
 */
export class RoundApi extends runtime.BaseAPI implements RoundApiInterface {

    /**
     * Create round
     */
    async roundCreateRoundRaw(requestParameters: RoundCreateRoundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Round>> {
        if (requestParameters['createRoundReq'] == null) {
            throw new runtime.RequiredError(
                'createRoundReq',
                'Required parameter "createRoundReq" was null or undefined when calling roundCreateRound().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/round`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoundReqToJSON(requestParameters['createRoundReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoundFromJSON(jsonValue));
    }

    /**
     * Create round
     */
    async roundCreateRound(createRoundReq: CreateRoundReq, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Round> {
        const response = await this.roundCreateRoundRaw({ createRoundReq: createRoundReq }, initOverrides);
        return await response.value();
    }

    /**
     * Get round info for current user
     */
    async roundGetRoundInfoRaw(requestParameters: RoundGetRoundInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetRoundInfoResp>> {
        if (requestParameters['roundId'] == null) {
            throw new runtime.RequiredError(
                'roundId',
                'Required parameter "roundId" was null or undefined when calling roundGetRoundInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['roundId'] != null) {
            queryParameters['roundId'] = requestParameters['roundId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/round/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRoundInfoRespFromJSON(jsonValue));
    }

    /**
     * Get round info for current user
     */
    async roundGetRoundInfo(roundId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetRoundInfoResp> {
        const response = await this.roundGetRoundInfoRaw({ roundId: roundId }, initOverrides);
        return await response.value();
    }

    /**
     * Get actual rounds
     */
    async roundGetTopRoundsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Round>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/round/top`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoundFromJSON));
    }

    /**
     * Get actual rounds
     */
    async roundGetTopRounds(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Round>> {
        const response = await this.roundGetTopRoundsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Add tap to active round
     */
    async roundTapToRoundRaw(requestParameters: RoundTapToRoundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TapResp>> {
        if (requestParameters['tapReq'] == null) {
            throw new runtime.RequiredError(
                'tapReq',
                'Required parameter "tapReq" was null or undefined when calling roundTapToRound().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/round/tap`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TapReqToJSON(requestParameters['tapReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TapRespFromJSON(jsonValue));
    }

    /**
     * Add tap to active round
     */
    async roundTapToRound(tapReq: TapReq, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TapResp> {
        const response = await this.roundTapToRoundRaw({ tapReq: tapReq }, initOverrides);
        return await response.value();
    }

}
